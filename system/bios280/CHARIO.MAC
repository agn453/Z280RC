	title 'Z280RC Character I/O handler for console UART'

;		+-----------------------+
;		|			|
;		|     C H A R I O	|
;		|			|
;		+-----------------------+
;
;           CP/M-80 Version 3  --  Modular BIOS
;
;	 Character I/O for the Modular CP/M 3 BIOS
;
;
;   Modification History:
;
;	27-Jun-2018	Tony Nicholson	Initial version for Z280RC
;	11-Nov-2018	Tony Nicholson	When DEBUG is enabled, intercept
;					CTRL-P input from the console
;					to invoke the BIOSDBG routine.
;					(This has a side-effect for
;					CP/M enabling/disabling printer
;					echo).
;	28-Nov-2018	Tony Nicholson	Only use Z280 UART routines
;					for LDRBIOS use (no device support)
;

	maclib	CONFIG.LIB
	maclib	Z280RCIO.LIB	; Define port addresses
	maclib	MODEBAUD.LIB	; Define serial mode bits and baud rates

	public	?cinit

  if ldrbios
	public	conout		; LDRBIOS uses only console output
    if debug
	public	const,conin	;  (unless DEBUG is also defined)
    endif
  else
	public	?co,?cost	; Otherwise include multiple
	public	?ci,?cist	;  device support
	public	@ctbl
  endif

max$devices equ 1	; Only Z280 UART for now

	extrn	iopuart		; I/O Page select

  if debug
	extrn	biosdbg		; BIOS debugger
	extrn	@indbg		; Debugger active flag
  endif

; Single Built-in UART
;
; UART Configuration Register (UCR) bits

ucr$bcm	equ	11000000b ; BC field of UART control register
ucr$5bv	equ	00000000b	; 5-bits per character
ucr$6bv	equ	01000000b	; 6-bits
ucr$7bv	equ	10000000b	; 7-bits
ucr$8bv	equ	11000000b	; 8-bits
ucr$pm	equ	00100000b ; P - Parity bit enable
ucr$pv	equ	00100000b	; extra bit with parity
ucr$eom	equ	00010000b ; E/O - parity even / odd
ucr$ev	equ	00010000b	; Even Parity
ucr$ov	equ	00000000b	; Odd Parity
ucr$csm	equ	00001000b ; CS - Clock select
ucr$ct1v equ	00001000b	; Use CT1 output for clock
ucr$cexv equ	00000000b	; External clock input from CT1 input
ucr$crm	equ	00000110b ; CR - Clock Rate multiplier
ucr$x1v	equ	00000000b	; x1
ucr$x16v equ	00000010b	; x16
ucr$x32v equ	00000100b	; x32
ucr$x64v equ	00000110b	; x64
ucr$lbm	equ	00000001b ; LB - Loop Back Enable
ucr$lbv	equ	00000001b	; Local Loop back mode

; Transmitter Control/Status (TCS)
; Receiver Control/Status (RCS)
; Receiver Data Register (RDR)
; Transmitter Data Register (TDR)

ctrlp	equ	010h		; CTRL-P to enter BIOSDBG
ctrlz	equ	01ah		; CTRL-Z end-of-file character

	common$segment	; All character I/O is in common memory

?cinit:
  if not ldrbios
	ld	a,c
	cp	max$devices	; Valid device code? (only 1)
	ret	nc		; No, return
  endif

	; Configure and Enable Console UART

	call	iopuart		; Select UART I/O Page

	; 8-bits, Odd parity, 1 stop bit, x16 external clock
	; Fixed speed is 115200 bps

	ld	a,ucr$8bv+ucr$pv+ucr$ov+ucr$x16v
	out	(ucr),a

	ld	a,uart$en	; Enable Transmitter
	out	(tcs),a

  if ldrbios and (not debug)
	xor	uart$en		; toggle to disable
  endif

	out	(rcs),a		; and Receiver

	outjmp

	ret

  if not ldrbios

?ci:				; character input

	ld	a,b
	cp	max$devices
	jr	nc,null$input
  else
conin:
  endif
ci1:
	call	?cist
	jr	z,ci1		; wait for character ready

	call	iopuart
	ld	c,rdr
ci2:	in	a,(c)		; get data

    if debug
	push	af
	ld	a,(@indbg)	; If inside debugger, ignore <CTRL-P>
	or	a
	jr	z,brktst
	pop	af
	ret
brktst:	pop	af
	cp	ctrlp		; CTRL-P breaks to debugger
	call	z,biosdbg
    endif
	ret

  if not ldrbios
null$input:
	ld	a,ctrlz		; return EOF (ctrl-Z) for NULL device
	ret
  endif

?cist:				; character input status

  if not ldrbios
	ld	a,b
	cp	max$devices
	jr	nc,null$status
  else
const:
  endif

	call	iopuart
	ld	c,rcs
ci3:	in	a,(c)		; read from status port
	and	rcsdav		; Receiver CA bit

ci4:	ret	z		; return with zero

null$status:
	or	0ffh		; return indicating character available
	ret

  if ldrbios
conout:
  else
?co:				; character output
	ld	a,b
	cp	max$devices
	jr	nc,null$output
  endif

	ld	a,c
	push	af		; save character from <C>
co$spin:
	call	?cost
	jr	z,co$spin	; wait for TxEmpty

	call	iopuart
	pop	af
	push	bc
	ld	c,tdr
	out	(c),a		; send data
	pop	bc

null$output:
				; swallow data
	ret

?cost:				; character output status
  if not ldrbios
	ld	a,b
	cp	max$devices
	jr	nc,null$status
  endif

	call	iopuart
	push	bc
	ld	c,tcs
	in	a,(c)		; get input status
	pop	bc
	and	tcstbe		; is TBE bit set in TCS?
	ret	z		; test transmitter empty
	or	0ffh
	ret			; return true if ready

  if not ldrbios
@ctbl:	defb	'UART  '	; device 0, On-chip UART
	defb	mb$in$out+mb$serial
	defb	baud$none	; Fixed-speed 115200 bps 8O1

	defb	0		; table terminator
  endif

	end
