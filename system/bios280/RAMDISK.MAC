	title	'Z280RC RAMDISK disk handler'

;		+-----------------------+
;		|			|
;		|     R A M D I S K	|
;		|			|
;		+-----------------------+
;
;           CP/M-80 Version 3  --  Modular BIOS
;
;	    Disk I/O Module for Z280 RAM drive
;
;   Modification History:
;
;	27-Jul-2018	Tony Nicholson	Initial version for Z280RC
;	28-Jul-2018	Tony Nicholson	Implement multi-sector transfer
;	23-Oct-2018	Tony Nicholson	Change DMA from burst to continuous
;	01-Nov-2018	Tony Nicholson	There's still some problem with
;					a banked memory configuration when
;					multiple directory and data buffers
;					are selected under GENCPM.  The
;					work-around is to specify only 1
;					of each for drive M: when doing
;					a GENCPM.  (The supplied BANKED.DAT
;					already has this set up).
;	08-Nov-2018	Tony Nicholson	Add the capabilty to manually
;					define the DPH and DPB with
;					a local allocation vector.
;	13-Nov-2018	Tony Nicholson	Switch to using MMU and the common
;					memory buffer to overcome the
;					disk transfer buffer (@dma) crossing
;					over the common-memory fence on
;					a banked system.
;	16-Nov-2018	Tony Nicholson	Initialise RAMDISK if it doesn't
;					have a valid label.
;	26-Nov-2018	Tony Nicholson	Common memory is contiguous in
;					the TPA bank so use this for the
;					DMA transfer.
;

	maclib	CPM3M80.LIB	; CPM 3 Parameter Block Macros
	maclib	Z280RCIO.LIB	; System I/O Addresses
	maclib	CONFIG.LIB	; Configuration Equates

  if ramdisk and (not ldrbios)
;
; The starting address for the RAMDISK is configurable (and is dependent
; on the CP/M-Plus memory bank configuration usage).
;
; For compatibility with CP/M 2.2 on the Z280RC, the normal starting
; address is 080000h.
;
    ifndef rampg$start
rampg$start equ 0800h	; Page address (high 16-bits) for start of RAMDISK
    endif
    ifndef rampg$end
rampg$end equ 2000h	; Page end address (high 16-bits) + 1
    endif

;
; Disk drive dispatching tables for linked BIOS
;
	public	ram0

;
; Variables containing parameters passed by BDOS
;
	extrn	@adrv, @rdrv
	extrn	@dma, @trk, @sect
	extrn	@dbnk, @dtyp, @cbnk

    if multi$sector$io
	extrn	@cnt, @derflg
    endif

;
; DMA routines in BIOSKRNL
;
	extrn	dma3xfr
	extrn	cnv12, phyahl

    if banked
	extrn	?usrsl, @ubnk
	extrn	bk0buf		; Sector buffer in bank 0
    endif

	extrn	?pmsg, ?getch

;
;	Maximum disk sector size
;
hstsiz	equ	512		; Sector size
spt	equ	256		; Sectors per "track"
ntrks	equ	((high rampg$end) - (high rampg$start))/2 ; Number of "tracks"
blksiz	equ	4096		; Blocksize of 4K
spb	equ	blksiz/hstsiz	; Sectors per block
drm	equ	512		; Directory entries (also see DPB)
dsm	equ	ntrks*(spt/spb)	; Number of 4K blocks per drive
bsh	equ	5		; Block shift factor for 4K blocks
blm	equ	00011111b	; Block mask for bsh bits
exm	equ	1		; Extent mask
al0	equ	11110000b	; First two bytes of allocation vector
al1	equ	00000000b	; (reserve 4 groups for directory)
psh	equ	2		; Physical record shift factor
phm	equ	00000011b	; Block mask for psh bits

hdtype	equ	20h		; Media Type for Memory Disk

    if	hstsiz ne 512
	; Block addressing relies on this
	.printx	"Error: RAMDISK sector size must be 512 bytes"
    endif

	; Get Hard-coded $date for RAMDISK label

    if banked
$day	aset	16
$month	aset	11
$year	aset	2018-1900	;years >= 2000 are >= 100
$hour	equ	18h		; hour and minute in BCD
$min	equ	20h
	cpmdate			;ASETs $date variable
    endif
	page
;
; Extended Disk Parameter Headers (XPDHs)
;
; The format of these XDPH headers is as described
; in the CP/M Plus Operating System Guide sample BIOS
; modules description - section 4
;
	bank0$segment

	defw	rd$write
	defw	rd$read
	defw	rd$login
	defw	rd$init
	defb	0,hdtype
	; RAM0
ram0:
    if use$disk$macros
	dph	0,dpb0,0	; No translation table, permanently mounted
    else
	defw	0		; No sector translation
	defb	0,0,0,0,0,0,0,0,0 ; 9-bytes of BDOS scratch area
	defb	0		; Media flag (no need to check for changes)
	defw	dpb0		; Pointer to disk parameter block
	defw	0		; No checksum vector (permanently mounted)
	defw	alv0		; Pointer to allocation vector
	defw	0FFFEh		; Pointer to directory buffers (GENCPM)
	defw	0FFFEh		; Pointer to data buffers (GENCPM)
	defw	0FFFFh		; No hash table
	defb	0		; Hash table bank (GENCPM)
    endif

;
; Disk Parameter Header blocks
;

	common$segment	; DPB must be resident

	; BY default, the RAM drive uses physical address space
	; 080000h..1FFFFFh (banks 8 to 31). It is configured as
	; 512 byte sectors, 256 sectors per track (1024 x 128 byte
	; logical sectors), 12 tracks, with blocksize 4096, 512
	; directory entries and no checksum vector (non-removable).

    if use$disk$macros
dpb0:	dpb	hstsiz,spt,ntrks,blksiz,drm,0,8000h
    else
	; Manually construct DPB
dpb0:	defw	(hstsiz/128)*spt	; Logical 128-byte sectors per track
	defb	bsh, blm		; Block shift and mask
	defb	exm			; Extent mask
	defw	dsm-1			; Maximum block number - 1
	defw	drm-1			; Number of directory entries - 1
	defb	al0,al1			; Allocation for directory
	defw	8000h			; Permanently mounted drive
	defw	0			; No reserved tracks
	defb	psh,phm			; Physical record shift factor and mask
    endif

	bank0$segment

;
; RD$INIT
;
; Disk I/O routines for standardized BIOS interface
;
; Initialization entry point.
;
;	called for first time initialization.
;
rd$init:
	; The DMA controller is already configured
	; by the cold ?BOOT routine (in BIOSKRNL module)

    if banked

	; Look at the first 8 bytes of the disk
	; to see if it is a valid directory volume
	; label.  If not, ask the user if they wish
	; to initialise it.

	xor	a		; Set-up DMA parameter
	ld	hl,label	;  to fetch the RamDisk label
	push	hl		;  (into bank 0 - so no need to PHYAHL)
	call	cnv12
	ld	(destl),hl
	ld	(desth),de
				; Fetch the Volume label
	ld	hl,xfer		; (XFER is pre-initialised
	call	dma3xfr		; to fetch the first 8 bytes)

	pop	ix		; Does the label match
	ld	b,8		;  ' RAMDISK'?

testlab:
	ld	a,(ix+0)
	cp	(ix+8)
	jr	nz,nomatch
	inc	ix
	djnz	testlab
	jp	match		; If it matches

nomatch:
	ld	hl,init$msg	; Prompt to initialise
	call	?pmsg
	call	?getch		; Get character
	cp	'Y'		; Is it a (Y)es?
	jp	nz,dont		; No, don't do anything

	; Clear directory and write label

	ld	hl,0F000h	; Point to RAMDISK
	ld	(destl),hl	; Low 12-bits
	ld	hl,080Fh
	ld	(desth),hl	; High 12-bits

	ld	hl,32		; Directory entry size
	ld	(count),hl	

	xor	a		; DMA source is address
	ld	hl,dlabel	;  of directory label
	push	hl		; Save for later
	push	hl		;  and put into IX
	pop	ix
	call	cnv12		; We're in bank 0 so no PHYAHL needed
	ld	(srcl),hl
	ld	(srch),de

	ld	hl,xfer
	call	dma3xfr		; Write directory label

	pop	hl		; Recover pointer to directory label
	ld	(hl),0E5h	; Create a deleted file entry
	inc	hl
	ld	b,32-1		; Remaining directory entry bytes
dentry:	ld	(hl),0		;  set to zero
	inc	hl
	djnz	dentry

	ld	bc,drm-1	; Number of directory entries to write
	ld	hl,0F020h	; Offset DMA address to write 
				;  the next directory entry to

zapdir:	ld	(destl),hl	; Update pointer in DMA block

	push	hl
	push	bc

	ld	hl,xfer		; Write blank directory entry
	call	dma3xfr

	pop	bc
	pop	hl

	addw	hl,0020h	; Next directory entry

	jr	nz,nxtone	; It didn't cross a 4K boundary?
	ld	a,h		; Advance into next 4K page
	or	0F0h		; Set high bits, keep low 12-bits
	ld	h,a

	push	hl		; Bump page address in
	ld	hl,(desth)	;  the DMA descriptor block
	addw	hl,0010h
	ld	(desth),hl
	pop	hl

nxtone:	dec	bc
	ld	a,b		; Done?
	or	c
	jr	z,done		; Yes

	ld	a,c		; No
	and	03h		; Is next dir entry a time-stamp?
	cp	01h
	jr	z,tstamp	; Yes

	ld	a,0E5h		; No, Write it to first byte
	ld	(ix+0),a

	push	bc		; Clear timestamp
	push	ix
	inc	ix		; IX -> dlabel+1
	ld	b,8		; No timestamp values
	xor	a		;  in any other directory entries
clrtim:	ld	(ix+0),a
	inc	ix
	djnz	clrtim
	pop	ix
	pop	bc
	jr	zapdir

tstamp:	ld	a,0FFh
first1	equ	$-1		; Flag for first sector
	or	a
	jr	z,tentry

	xor	a
	ld	(first1),a	; Clear first sector flag

	push	hl		; First sector has a timestamp
	ld	hl,$date	; in create and update fields
	ldw	(ix+1),hl
	ldw	(ix+5),hl
	ld	hl,$min*256+$hour
	ldw	(ix+3),hl
	ldw	(ix+7),hl
	pop	hl

tentry:	ld	a,021h		; This entry is a timestamp one
	ld	(ix+0),a
	jr	zapdir

dont:	ld	hl,no$msg
	jr	msg

done:	ld	hl,done$msg
msg:	call	?pmsg

match:
	; Put a return into the entry-point
	; to guard against re-entry to rd$init

	ld	(rd$init),0c9h

    endif ; banked	

;
; RD$LOGIN
;
; This entry is called when a logical drive is about to
; be logged into for the purpose of density determination.
;
; It adjusts the parameters contained in the disk
; parameter header pointed at by <DE>
;
rd$login:
	ret		; Nothing to do (drive is not removable)

;
; Disk READ and WRITE entry points.
;
; These entries are called with the following arguments:
;
; relative drive number in @rdrv (8 bits)
; absolute drive number in @adrv (8 bits)
; disk transfer address in @dma (16 bits)
; disk transfer bank	in @dbnk (8 bits)
; disk track address	in @trk (16 bits)
; disk sector address	in @sect (16 bits)
; disk type		in @dtyp (8 bits)	
; pointer to XDPH in <DE>
;
; They transfer the appropriate data, perform retries
; if necessary, then return an error code in <A>
;
; There is no need to preserve BC, DE or HL
;

rd$read:
	call	getadr		; Source address to AHL
	call	cnv12		; Convert to 2 words in
	ld	(srcl),hl	;  DMA register format
	ld	(srch),de

    if banked
	xor	a
	ld	(rwflag),a	; Flag cleared (for READ)
	ld	hl,bk0buf	; Read into bank 0 sector buffer
	call	phyahl
    else
	ld	a,(@dbnk)	; Read directly into bank 0
	ld	hl,(@dma)	;  user buffer
    endif

	jr	rw$common	; Start DMA and Return

rd$write:

    if	banked
	or	0FFh		; Set flag (for WRITE)
	ld	(rwflag),a

	ld	a,(@ubnk)	; Save old User-mode bank on
	push	af		;  the stack
	ld	a,(@dbnk)	; Prepare to copy the data
	call	?usrsl		;  from the user buffer to common

	ld	bc,hstsiz	; byte count
	ld	de,bk0buf	; dest
	ld	hl,(@dma)	; source

copywr:	ldup	a,(hl)		; Copy data to bk0buf
	ld	(de),a
	inc	de
	inc	hl
	dec	bc
	ld	a,c
	or	b
	jr	nz,copywr

	pop	af		; Restore User-mode PDRs
	call	?usrsl
	xor	a
	ld	hl,bk0buf	; Write from bank 0 sector buffer
	call	phyahl
    else
	ld	a,(@dbnk)
	ld	hl,(@dma)
    endif

	call	cnv12		; Convert to 2 words in
	ld	(srcl),hl	;  DMA register format
	ld	(srch),de
	call	getadr		; Destination address to AHL

;
;	R W $ C O M M O N   --  Preform final transfer processing.
;

rw$common:
	call	cnv12
	ld	(destl),hl	; DEHL has destination in two 12bit parts
	ld	(desth),de

    if multi$sector$io
      if banked
	ld	a,1		; Force multi-sector OFF
	ld	(@cnt),a	; (RAMDISK doesn't support it due to
	ld	(@rwcnt),a	; using the common memory buffer
	ld	hl,hstsiz	; on a banked system).
      else
	ld	a,(@cnt)	; Multi-sector count
	ld	h,a		; Multiply by 512
	ld	l,0		; (NB: assumes HSTSIZ is 512)
	add	hl,hl
      endif
    else
	ld	hl,hstsiz	; Always 512 bytes
    endif

	ld	(count),hl

	ld	hl,xfer		; Use DMA3 to transfer sector(s)
	call	dma3xfr

    if banked
	ld	a,(rwflag)	; Did we do a read or write?
	or	a
	jr	nz,success	; Write - so done!

	ld	a,(@ubnk)	; Read, so copy data from common
	push	af		;  buffer to users buffer
	ld	a,(@dbnk)
	call	?usrsl

	ld	bc,hstsiz	; byte count
	ld	de,bk0buf	; source
	ld	hl,(@dma)	; dest

copyrd:	ld	a,(de)
	ldup	(hl),a
	inc	de
	inc	hl
	dec	bc
	ld	a,c
	or	b
	jr	nz,copyrd

	pop	af
	call	?usrsl
success:
    endif

	xor	a		; Return success
	ret

    if banked
rwflag:	ds	1
    endif

; Hardware DMA parameter block

xfer:
destl:	defs	2		;Destination address bits 11..0
desth:	defs	2		;  "           "          23..12
srcl:	defw	0F000h		;Source address bits 11..0
srch:	defw	080Fh		;  "      "          23..12
count:	defw	8		;Bytes to transfer
dscrpt:	defw	dma$descriptor

    if banked
label:	defs	8
dlabel:	defb	' RAMDISK    ',31h,0,0,0
	defb	0,0,0,0,0,0,0,0
	defw	$date
	defb	$hour, $min
	defw	$date
	defb	$hour, $min

init$msg: defz	cr,lf,'%RAMDISK label missing. Initialise (Y/N) ? '
done$msg: defz	'Y - RAMDISK initialised.',cr,lf
no$msg:	defz	'N',cr,lf
    endif

;
; Get the physical address of the sector to be transferred
;
; Bit 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
;      T  T  T  T  T  T  T  S  S  S  S  S  S  S  S  X  X  X  X  X  X  X  X  X
;
; Returns Bank number in A
; and low 16 bits of address in HL
;

getadr:	ld	a,(@sect)
	sla	a		; Sector*2, high bit into CY
	ld	l,a
	ld	a,(@trk)
	rla			; Track*2 and shift in bit from CY
	ld	h,a
	addw	hl,rampg$start	; Physical page address
	ld	a,h		; Bank to A
	ld	h,l		; Address bits 15..8 to H
	ld	l,00h		; Address bits 7..0 always zero
	ret

    if not use$disk$macros
	; Allocation vector (in bank 0)

alv0:	defs	(dsm/4)+2
    endif
  endif ; ramdisk and (not ldrbios)

	end
