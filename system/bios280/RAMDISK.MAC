	title	'Z280RC RAMDISK disk handler'

;		+-----------------------+
;		|			|
;		|     R A M D I S K	|
;		|			|
;		+-----------------------+
;
;           CP/M-80 Version 3  --  Modular BIOS
;
;	    Disk I/O Module for Z280 RAM drive
;
;   Modification History:
;
;	27-Jul-2018	Tony Nicholson	Initial version for Z280RC
;	28-Jul-2018	Tony Nicholson	Implement multi-sector transfer
;	23-Oct-2018	Tony Nicholson	Change DMA from burst to continuous
;	01-Nov-2018	Tony Nicholson	There's still some problem with
;					a banked memory configuration when
;					multiple directory and data buffers
;					are selected under GENCPM.  The
;					work-around is to specify only 1
;					of each for drive M: when doing
;					a GENCPM.  (The supplied BANKED.DAT
;					already has this set up).

	maclib	CPM3M80.LIB	; CPM 3 Parameter Block Macros
	maclib	Z280RCIO.LIB	; System I/O Addresses
	maclib	CONFIG.LIB	; Configuration Equates

  if ramdisk and (not ldrbios)
;
; The starting address for the RAMDISK is configurable (and is dependent
; on the CP/M-Plus memory bank configuration usage).
;
; For compatibility with CP/M 2.2 on the Z280RC, the normal starting
; address is 080000h.
;
    ifndef ramdaddr
ramdaddr equ 0800h	; Page address (high 16-bits) for start of RAMDISK
    endif

;
; Disk drive dispatching tables for linked BIOS
;
	public	ram0

;
; Variables containing parameters passed by BDOS
;
	extrn	@adrv, @rdrv
	extrn	@dma, @trk, @sect
	extrn	@dbnk, @dtyp, @cbnk

    if multi$sector$io
	extrn	@cnt, @derflg
    endif

;
; Utility routines in the BIOSKRNL
;
	extrn	iopdma, iopdef

;
; DMA routines in BIOSKRNL
;
	extrn	dmaxfr
	extrn	cnv12, phyahl

;
;	Maximum disk sector size
;
hstsiz	equ	512		; Sector size
spt	equ	256		; Sectors per "track"
blksiz	equ	4096		; Blocksize of 4K
spb	equ	blksiz/hstsiz	; Sectors per block
drm	equ	512		; Directory entries (also see DPB)
dsm	equ	12*(spt/spb)	; Number of 4K blocks per drive
hdtype	equ	20h		; Media Type for Memory Disk

  if	hstsiz ne 512
	; Block addressing relies on this
	.printx	"Error: RAMDISK sector size must be 512 bytes"
  endif

;
; Extended Disk Parameter Headers (XPDHs)
;
; The format of these XDPH headers is as described
; in the CP/M Plus Operating System Guide sample BIOS
; modules description - section 4
;
	bank0$segment

	defw	hd$write
	defw	hd$read
	defw	hd$login
	defw	hd$init0
	defb	0,hdtype
	; RAM0
ram0:
	dph	0,dpb0,0	; No translation table, permanently mounted

;
; Disk Parameter Header blocks
;

	common$segment	; DPB must be resident

	; BY default, the RAM drive uses physical address space
	; 080000h..1FFFFFh (banks 8 to 31). It is configured as
	; 512 byte sectors, 256 sectors per track (1024 x 128 byte
	; logical sectors), 12 tracks, with blocksize 4096, 512
	; directory entries and no checksum vector (non-removable).

dpb0:	dpb	512,256,12,4096,512,0,8000h

	bank0$segment

;
; Disk I/O routines for standardized BIOS interface
;
; Initialization entry point.
;
;	called for first time initialization.
;
hd$init0:
	; The DMA controller is already configured
	; by the cold ?BOOT routine (in BIOSKRNL module)

;
; This entry is called when a logical drive is about to
; be logged into for the purpose of density determination.
;
; It adjusts the parameters contained in the disk
; parameter header pointed at by <DE>
;
hd$login:
	ret		; Nothing to do (drive is not removable)

;
; Disk READ and WRITE entry points.
;
; These entries are called with the following arguments:
;
; relative drive number in @rdrv (8 bits)
; absolute drive number in @adrv (8 bits)
; disk transfer address in @dma (16 bits)
; disk transfer bank	in @dbnk (8 bits)
; disk track address	in @trk (16 bits)
; disk sector address	in @sect (16 bits)
; disk type		in @dtyp (8 bits)	
; pointer to XDPH in <DE>
;
; They transfer the appropriate data, perform retries
; if necessary, then return an error code in <A>
;
; There is no need to preserve BC, DE or HL
;

hd$read:
	call	getadr		; Source address to AHL
	call	cnv12		; Convert to 2 words in
	ld	(srcl),hl	;  DMA register format
	ld	(srch),de

	ld	a,(@dbnk)
	ld	hl,(@dma)

    if	banked
	; Need to calculate physical address for DMA
	call	phyahl
    endif
	jr	rw$common	; Start DMA and Return

hd$write:
	ld	a,(@dbnk)
	ld	hl,(@dma)

    if	banked
	; Need to calculate physical address for DMA
	call	phyahl
    endif

	call	cnv12		; Convert to 2 words in
	ld	(srcl),hl	;  DMA register format
	ld	(srch),de
	call	getadr		; Destination address to AHL

;
;	R W $ C O M M O N   --  Preform final transfer processing.
;

rw$common:
	call	cnv12
	ld	(destl),hl	; DEHL has destination in two 12bit parts
	ld	(desth),de

  if multi$sector$io
	ld	a,(@cnt)	; Multi-sector count
	ld	h,a		; Multiply by 512
	ld	l,0		; (NB: assumes HSTSIZ is 512)
	add	hl,hl
  else
	ld	hl,hstsiz	; Always 512 bytes
  endif
	ld	(count),hl

	ld	c,dal2		; Use DMA2 to transfer sector(s)
	ld	hl,xfer
	call	dmaxfr

	; Always success
	xor	a		; Return success
	ret

; Hardware DMA parameter block

xfer:
destl:	defs	2		;Destination address bits 11..0
desth:	defs	2		;  "           "          23..12
srcl:	defs	2		;Source address bits 11..0
srch:	defs	2		;  "      "          23..12
count:	defs	2		;Bytes to transfer
dscrpt:	defw	dma$descriptor

;
; Get the physical address of the sector to be transferred
;
; Bit 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
;      T  T  T  T  T  T  T  S  S  S  S  S  S  S  S  X  X  X  X  X  X  X  X  X
;
; Returns Bank number in A
; and low 16 bits of address in HL
;

getadr:	ld	a,(@sect)
	sla	a		; Sector*2, high bit into CY
	ld	l,a
	ld	a,(@trk)
	rla			; Track*2 and shift in bit from CY
	ld	h,a
	addw	hl,ramdaddr	; Physical page address
	ld	a,h		; Bank to A
	ld	h,l		; Address bits 15..8 to H
	ld	l,00h		; Address bits 7..0 always zero
	ret

  endif ; ramdisk and (not ldrbios)

	end
