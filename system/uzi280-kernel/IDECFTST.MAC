	.z280

	maclib	Z280RC.INC

usedma	equ	-1

$print	equ	9
bdos	equ	0005h


start:	call	_wd_io

	ld	c,9
	ld	de,msg
	call	5
	ld	a,(_wd_rdwr)
	or	a
	ld	de,rdmsg
	jr	z,readm
	ld	de,wrmsg
readm:	ld	c,9
	call	5
	ld	de,trkmsg
	ld	c,9
	call	5
	ld	hl,(_wdtrk)
	call	pdec
	ld	de,secmsg
	ld	c,9
	call	5
	ld	hl,(_wdsec)
	call	pdec
	ld	de,crlfmsg
	ld	c,9
	call	5

	ld	hl,buffer
	ld	de,512		;count

di1:	call	phexhl
	call	space

	ld	b,16
	push	hl
	ld	(count),de
di2:	ld	a,(hl)
	call	phex
	call	space
	inc	hl
	dec	de
	ld	a,d
	or	e
	jr	z,di6
	djnz	di2
	call	space
	ld	b,16
	pop	hl
di3:	ld	a,(hl)
	call	printable
	inc	hl
	djnz	di3
	call	crlf
	jr	di1
di6:	ld	de,(count)
	ld	a,e
	cp	16
	jr	z,di5
di7:	push	af
	call	space
	call	space
	call	space
	pop	af
	inc	a
	cp	16
	jr	c,di7
di5:	call	space
	ld	b,e
	pop	hl
di8:	ld	a,(hl)
	call	printable
	inc	hl
	djnz	di8
	call	crlf

	ret

count:	defs	2

pdec:	ld	bc,-10
pdec1:	ld	de,-1
pdec2:	add	hl,bc
	inc	de
	jr	c,pdec2
	push	hl
	ex	de,hl
	ld	a,h
	or	l
	call	nz,pdec1
	pop	hl
	ld	a,l
	add	a,'0'+10
	push	af
	push	bc
	push	de
	push	hl
	ld	e,a
	ld	c,2
	call	5
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

space:	ld	a,' '
	jr	co

crlf:	ld	a,13
	call	co
	ld	a,10

co:	push	af
	and	7fh
	call	putc
	pop	af
	ret

phex:	push	af
	rrca
	rrca
	rrca
	rrca
	call	phexc
	pop	af
phexc:	and	0Fh
	add	a,90h
	daa
	adc	a,40h
	daa
	jr	co

printable:
	cp	' '
	jr	c,pr01
	cp	'~'+1
	jr	c,co
pr01:	ld	a,'.'
	jr	co

putc:	push	af
	push	bc
	push	de
	push	hl
	ld	e,a
	ld	c,2
	call	5
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

phexhl:	push	af
	ld	a,h
	call	phex
	ld	a,l
	call	phex
	ld	a,':'
	call	co
	pop	af
	ret



msg:	defm	'idecftst: $'
rdmsg:	defm	'read$'
wrmsg:	defm	'write$'
trkmsg:	defm	' track $'
secmsg:	defm	' sector $'
crlfmsg: defb	13,10,'$'

buffer	equ	4000h	; Buffer read into TPA address 014000h

_dptrhi: defw	0012Fh	; (physical address 012000)
_dptrlo: defw	0F000h

_wdtrk:	defw	512	; track 512
_wdsec:	defw	1	; sector 1
_wd_rdwr: defw	0	; Read


; write/read entry from devwd.c 
_wd_io:
	call	_iopg00		; Select CF I/O page

loop01:
	in	a,(cfstat)	; Spin until not busy (bit 7 clear)
	and	080h
	jr	nz,loop01

	ld	a,0E0h		; Logical addressing mode (bit 6 high)
	out	(cf2427),a	; Unit number 0 (bit 4), bits 7&5 high

	ld	hl,(_wdtrk)	; Track number maps to bits 23..8
	ld	a,h		;  of logical block number
	out	(cf1623),a
	ld	a,l
	out	(cf815),a

	ld	a,(_wdsec)	; Sector is 0..255 and maps to
	out	(cf07),a	;  bits 7..0 of logical block number

	ld	a,1		; One sector
	out	(cfsectcnt),a

loop02:	in	a,(cfstat)	; Spin until not BUSY (bit 7 off) and
	and	0c0h		;  Drive Ready (bit 6 on)
	xor	040h
	jr	nz,loop02

	ld	hl,(_wd_rdwr)	; Is is a Read or Write?
	ld	a,l
	or	h
	jr	nz,write	; Write

	ld	a,020h		; Read command
	out	(cfcmd),a

loop04:	in	a,(cfstat)	; Spin until not BUSY (bit 7 off) and
	and	088h		;  DRQ (bit 3 on)
	xor	008h
	jr	nz,loop04

	in	a,(cfstat)	; Error (bit 0 on)?
	and	001h
	jr	z,contrd	; No, continue read

error:	call	_wd_error
	ret

contrd:

  if usedma

	ld	hl,cfdata	; Low 12-bit I/O address
	ld	(hdsrc),hl
	ld	hl,cfp*256	; High 12-bit I/O page
	ld	(hdsrc+2),hl
	ld	hl,(_dptrlo)
	ld	(hddest),hl
	ld	hl,(_dptrhi)
	ld	(hddest+2),hl
	ld	hl,1110001100000000B
		; EN (bit 15)=1
		; Source is I/O address unmodified (bits 14..12)=110b
		; No interrupt (bit 11)=0
		; Word size (bits 10..9)=01b
		; Continuous mode (bits 8..7)=10b
		; Flowthrough (bits 6..5)=00b
		; Transfer complete (bit 4)
		; Destination Auto-increment memory (bits 3..1)=000b
		; End-of-process Signalled
	call	hddmaio		; Start DMA
  else

	ld	hl,buffer
	ld	bc,cfdata
	inirw
  endif

	jr	done

write:	ld	a,030h		; CF  Write command
	out	(cfcmd),a

loop07:	in	a,(cfstat)	; Spin until not BUSY (bit 7 off) and
	and	088h		;  DRQ (bit 3 on)
	xor	008h
	jr	nz,loop07

	ld	hl,(_dptrlo)	; Copy block to local buffer
	ld	(hdsrc),hl
	ld	hl,(_dptrhi)
	ld	(hdsrc+2),hl
	ld	hl,cfdata
	ld	(hddest),hl
	ld	hl,cfp*256
	ld	(hddest+2),hl
	ld	hl,1000001100001100B
		; EN (bit 15)=1
		; Source Auto-increment memory (bits 14..12)=000b
		; No interrupt (bit 11)=0
		; Word size (bits 10..9)=01b
		; Continuous mode (bits 8..7)=10b
		; Flowthrough (bits 6..5)=00b
		; Transfer complete (bit 4)
		; Destination I/O address unmodified (bits 3..1)=110b
		; End-of-process Signalled
	call	hddmaio		; Start DMA

loop08:	in	a,(cfstat)	; Spin until not BUSY (bit 7 off)
	and	080h
	jr	nz,loop08

	in	a,(cfstat)	; Error (bit 0 on)
	and	001h
	jr	nz,error

done:	call	_iopg00		; Done, restore I/O page

	ret


hddmaio:
	ld	(descr),hl	; Save descriptor
	call	_iopgff		; DMA I/O page
	ld	c,dal3
	ld	hl,hddest
	ld	b,6
loop00:	OUTIW
	inc	c
	inc	b
	dec	b
	jr	nz,loop00
	; fall through

_iopg00:
	ld	l,cfp
setiop:	ld	c,iop
	ldctl	(c),hl
	nop
	nop
	nop
	nop
	ret

_iopgFF:
	ld	l,dmap
	jr	setiop


_wd_error:
	ld	c,$print
	ld	de,ioerrmsg
	call	bdos
	ret

ioerrmsg:
	defb	13,10,'IDECF I/O error$'

hddest:	defw	0,0	
hdsrc:	defw	0,0
	defw	256	; length: 256 Words
descr:	defs	2	; descriptor

	end
